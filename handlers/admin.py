from create_bot import bot, dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from keyboard import greet_key, brcs_key, admin_key
from config import admin_id, adminPanelPasswords
from api import count_from_api
from connect import write_key, print_all_keys, get_count, delete_key, check, get_info_db, print_all, write, delete, get_real_count
import datetime as DT
from time import sleep
import xlsxwriter
# ean = barcode.get('ean13', barcode_init, writer=ImageWriter())

class FSMcreate(StatesGroup):
    admin_panel = State()
    add_user = State()
    del_user = State()
    check_user = State()
    add_price = State()
    delete_price = State()
    tbmain = State()
    send_all_main = State()
    send_one_main = State()

async def admin_start(message: types.Message):
	await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω —É–≤—ñ–π—à–æ–≤ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</b>')
	await FSMcreate.admin_panel.set()
	await bot.send_message(chat_id = message.from_user.id, text = "–í—ñ—Ç–∞—éüëã\n–¶–µ –∑—Ä—É—á–Ω–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –≤ —è–∫—ñ–π —Ç–∏ –º–æ–∂–µ—à –∫–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n\n<b>\"–î–æ–¥–∞—Ç–∏\"</b><i> - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</i>\n<b>\"–í–∏–¥–∞–ª–∏—Ç–∏\"</b><i> - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–¥</i>\n<b>\"–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ñ–æ\"</b><i> - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á</i>–∞\n<b>\"–°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤\"</b><i> - –í–∏–≤–æ–¥–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ñ—Ö –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</i>\n\n–£—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω—ñ –Ω–∏–∂—á–µüòâ" , reply_markup=admin_key)


# add user to db 
# add user to db 
# add user to db
async def add_user_start(message: types.Message, state: FSMContext):
	await FSMcreate.add_user.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>id</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –≤–∏–¥–∞–ª–µ–Ω—å —Ñ–æ–Ω–∞\n\n<i>–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Ç–æ –π–æ–≥–æ —á–∞—Å –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∏–π!</i>', reply_markup=brcs_key)

async def add_user_main(message: types.Message, state: FSMContext):
	try:
		user_id, user_count = str(message.text).split(" ", 1)

		await write(user_id, int(user_count))
		await bot.send_message(chat_id = -1001551885182, text=f'<i>LOG-Admin panel--!</i>\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:  <code>{user_id}</code>, –∑–∞–ø–∏—Å–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å - <code>{user_count}</code>')
		await bot.send_message(chat_id = message.from_user.id, text=f'<i>LOG-Admin panel--!</i>\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:  <code>{user_id}</code>, –∑–∞–ø–∏—Å–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å - <code>{user_count}</code>', reply_markup=brcs_key)
		await bot.send_message(chat_id = int(user_id), text = f'<i><b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –≤–∏–¥–∞–ª–µ–Ω—å –∑–º—ñ–Ω–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚úÖ</i>')
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö</i>', reply_markup=brcs_key)

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
 
async def del_user_start(message: types.Message, state: FSMContext):
	await FSMcreate.del_user.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>id</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è', reply_markup=brcs_key)

async def del_user_main(message: types.Message, state: FSMContext):
	try:
		user_id = str(message.text)
		delete_process = await delete(user_id)
		if delete_process == True:
			await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:<code>{user_id}</code> - –≤–∏–¥–∞–ª–µ–Ω–∏–π!')
			await bot.send_message(chat_id=message.from_user.id, text=f'<b>–ì–æ—Ç–æ–≤–æ!</b>\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:<code>{user_id}</code> - –≤–∏–¥–∞–ª–µ–Ω–∏–π!', reply_markup=brcs_key)
		elif delete_process == False:
			await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</i>', reply_markup=brcs_key)
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</i>', reply_markup=brcs_key)

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################

async def send_csv(id_user, arr):
	workbook = xlsxwriter.Workbook(f'all_users.xlsx')
	worksheet = workbook.add_worksheet()
	
	names = ['ID —é–∑–µ—Ä–∞', "–∫—ñ–ª—å–∫—ñ—Å—Ç—å"]
	row = 0
	column = 0


	for i in arr:
		user_id = i
		user_count = arr.get(i)

		worksheet.write(row, 0, user_id)
		worksheet.write(row, 1, user_count)
		row += 1
	workbook.close()
	with open(f'all_users.xlsx', 'rb') as f:
		await bot.send_document(id_user, f)


async def list_users(message: types.Message, state: FSMContext):
	list_of_users = await print_all()
	list_for_sheet = {}
	await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω –∑–∞–ø–∏—Ç–∞–≤ –±–∞–∑—É –ø—ñ–¥–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>')
	if len(list_of_users) == 0:
		result_text = '<i>–í –±–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ü§∑‚Äç‚ôÇÔ∏è</i>'
		await bot.send_message(chat_id=message.from_user.id, text=f'{result_text}')

	else:
		result_text = '<b>–í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n'
		inx = 1
		for i in list_of_users:
			list_for_sheet[i] = str(list_of_users.get(i))
			result_text += f'<i>{inx}</i>.) id: <code>{i}</code>, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: <code>{str(list_of_users.get(i))}</code>\n'
			inx += 1
			if inx % 50 == 0 or len(list_of_users)+1 == inx:
				await bot.send_message(chat_id=message.from_user.id, text=f'{result_text}')
				# sleep(0.25)
				result_text = ''
	await send_csv(message.from_user.id, list_for_sheet)
	# print(list_for_sheet)

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################

async def check_user_start(message: types.Message, state: FSMContext):
	await FSMcreate.check_user.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>id</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏', reply_markup=brcs_key)

async def check_user_main(message: types.Message, state: FSMContext):
	try:
		user_id = str(message.text)
		check_info = await get_info_db(user_id)
		if check_info != False:
			await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω –∑–∞–ø–∏—Ç–∞–≤ –¥–µ—Ç–∞–ª—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ —É {user_id}</b>')
			await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É <code>{user_id}</code>\n–¥–æ—Ä—ñ–≤–Ω—é—î: {check_info}</i>', reply_markup=brcs_key)
		elif check_info == False:
			await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</i>', reply_markup=brcs_key)
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</i>', reply_markup=brcs_key)





async def list_prices(message: types.Message, state: FSMContext):
	list_of_prices = await print_all_keys()
	await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n{message.from_user}\n<b>–¶–µ–π –∞–¥–º—ñ–Ω –∑–∞–ø–∏—Ç–∞–≤ –±–∞–∑—É –∫–ª—é—á—ñ–≤ –Ω–∞ –ø–∏–¥–ø–∏—Å–∫–∏</b>')
	if len(list_of_prices) == 0:
		result_text = '<i>–í –±–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö –∫–ª—é—á—ñ–≤ü§∑‚Äç‚ôÇÔ∏è</i>'
	else:
		result_text = '<b>–í—Å—ñ –∫–ª—é—á—ñ:</b>\n'
		inx = 1
		for i in list_of_prices:
			count = int(await get_real_count(i))
			result_text += f'<i>{inx}</i>.) –∫–ª—é—á: <code>{i}</code>, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: <code>{count}</code>\n'
			inx += 1
	await bot.send_message(chat_id=message.from_user.id, text=f'{result_text}')


async def add_price_start(message: types.Message, state: FSMContext):
	await FSMcreate.add_price.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>–∫–ª—é—á</b> —Ç–∞ <b>–∫—ñ–ª—å–∫—ñ—Å—Ç—å</b>\n(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>6TYGKYE15K6x7ZfpY2TeTFkD</code>)\n\n<i>–Ø–∫—â–æ –∫–ª—é—á –Ω–∞ —Ü–µ–π —á–∞—Å –≤–∂–µ —ñ—Å–Ω—É—î, —Ç–æ —Ü–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞!</i>', reply_markup=brcs_key)

async def add_price_main(message: types.Message, state: FSMContext):
	try:
		key= str(message.text)
		count = int(await get_real_count(key))
		await write_key(str(key))
		result_text = str(f'<b>–ì–æ—Ç–æ–≤–æ!</b> –¢–æ–∫–µ–Ω—É:  <code>{key}</code>, –∑–∞–ø–∏—Å–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å - <code>{count}</code>')
		# print(result_text)
		await bot.send_message(chat_id=message.from_user.id, text=result_text)

	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö</i>', reply_markup=brcs_key)




async def del_price_start(message: types.Message, state: FSMContext):
	await FSMcreate.delete_price.set()
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ <b>–∫–ª—é—á</b> –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è', reply_markup=brcs_key)

async def del_price_main(message: types.Message, state: FSMContext):
	try:
		key = str(message.text)
		delete_process = await delete_key(key)
		if delete_process == True:
			await bot.send_message(chat_id=-1001551885182, text=f'<i>LOG-Admin panel--!</i>\n–ö–ª—é—á <b>{days}</b> - –≤–∏–¥–∞–ª–µ–Ω–∏–π!')
			await bot.send_message(chat_id=message.from_user.id, text=f'<b>–ì–æ—Ç–æ–≤–æ!</b>\n–ö–ª—é—á <b>{days}</b> –¥–Ω—ñ - –≤–∏–¥–∞–ª–µ–Ω–∏–π!', reply_markup=brcs_key)
		elif delete_process == False:
			await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—é—á—É</i>', reply_markup=brcs_key)
	except:
		await bot.send_message(chat_id=message.from_user.id, text=f'<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—é—á—É</i>', reply_markup=brcs_key)

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################


async def get_all_refs(message: types.Message, state: FSMContext):
	list_refs = await print_all_referrers()
	result = '<b>–í—Å—ñ —Ä–µ—Ñ–µ—Ä–∞–ª–∏:</b>\n'
	inx = 1
	for i in list_refs:
		result += f'<i>{inx}.)</i> id: <code>{i}</code>, –∑–∞–ø—Ä–æ—à–µ–Ω–∏–π: <code>{list_refs.get(i)}</code> \n'
		inx += 1
		if inx % 50 == 0 or len(list_refs) == inx-1:
			await bot.send_message(chat_id=message.from_user.id, text=f'{result}')
			result = ''




######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################


async def send_all(message: types.Message, state: FSMContext):
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞', reply_markup=brcs_key)
	await FSMcreate.send_all_main.set()

async def send_all_main(message: types.Message, state: FSMContext):
	list_users = await print_all()
	# list_users = ['904245039']
	inx = 0
	temporary_list = []
	n = 0
	for i in list_users:
		# print(i)
		i = int(i)
		inx += 1
		
		# temporary_list.append(i)
		# if inx % 15 == 0 or len(temporary_list) == inx:
			# for id_u in temporary_list:
		n += 1
		try:
			await bot.send_message(chat_id=i, text=message.text)
		except:
			for adm_id in admin_id:
				await bot.send_message(chat_id=adm_id, text=f"{n}. –ù–µ –≤–¥–∞–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –¥–æ: {i}")

		# temporary_list = []
		sleep(0.1)
		if inx % 100 == 0:
			sleep(10)


######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################


async def send_one(message: types.Message, state: FSMContext):
	await bot.send_message(chat_id=message.from_user.id, text=f'‚úçÔ∏è–ù–∞–ø–∏—à–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–µ–∫—Å—Ç –∑ —Ç–µ–≥–∞–º–∏ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫—É', reply_markup=brcs_key)
	await FSMcreate.send_one_main.set()

async def send_one_main(message: types.Message, state: FSMContext):
	try:
		id_u, text = (message.text).split('\n', 1)
		await bot.send_message(chat_id = id_u, text = text)
		await bot.send_message(chat_id = message.from_user.id, text = '<b>–ì–æ—Ç–æ–≤–æ‚úÖ</b>')
		print(id_u, text)
	except:
		await bot.send_message(chat_id = message.from_user.id, text = '<i>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö</i>')


######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################


#
#
#
async def post_in_channel(dp: Dispatcher):
	print(123)
	prices_text = await pricesString('USDT', 'UAH', prices)
	await bot.send_message(-1001551885182, text=prices_text)
#
#
#




async def back(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	elif str(current_state) in ["FSMcreate:add_user", "FSMcreate:del_user", "FSMcreate:check_user", "FSMcreate:delete_price", "FSMcreate:add_price", "FSMcreate:tbmain", "FSMcreate:send_all_main"]:
		await FSMcreate.admin_panel.set()
		await bot.send_message(chat_id = message.from_user.id, text = 'Ok', reply_markup=admin_key)
		return
	else:
		await state.finish()
		await bot.send_message(chat_id = message.from_user.id, text = 'Ok', reply_markup=greet_key)
		return

def register_handlers_create(dp: Dispatcher):
    dp.register_message_handler(back, state='*', commands=['–ù–∞–∑–∞–¥'])
    dp.register_message_handler(back, Text(equals='–Ω–∞–∑–∞–¥', ignore_case=True), state='*')

    dp.register_message_handler(admin_start, text=adminPanelPasswords, state = None)
    dp.register_message_handler(add_user_start, text=["–î–æ–¥–∞—Ç–∏"], state = FSMcreate.admin_panel)
    dp.register_message_handler(add_user_main, state = FSMcreate.add_user)
    dp.register_message_handler(del_user_start, text=["–í–∏–¥–∞–ª–∏—Ç–∏"], state = FSMcreate.admin_panel)
    dp.register_message_handler(del_user_main, state = FSMcreate.del_user)

    dp.register_message_handler(list_users, text=["–°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤"], state = FSMcreate.admin_panel)
    dp.register_message_handler(check_user_start, text=["–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ñ–æ"], state = FSMcreate.admin_panel)
    dp.register_message_handler(check_user_main, state = FSMcreate.check_user)

    dp.register_message_handler(list_prices, text=["–ö–ª—é—á—ñ"], state = FSMcreate.admin_panel)
    dp.register_message_handler(add_price_start, text=["–î–æ–¥–∞—Ç–∏ –∫–ª—é—á"], state = FSMcreate.admin_panel)
    dp.register_message_handler(add_price_main, state = FSMcreate.add_price)
    dp.register_message_handler(del_price_start, text=["–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á"], state = FSMcreate.admin_panel)
    dp.register_message_handler(del_price_main, state = FSMcreate.delete_price)

    dp.register_message_handler(send_all, text=['–†–æ–∑—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç'], state = FSMcreate.admin_panel)
    dp.register_message_handler(send_all_main, state = FSMcreate.send_all_main)
    dp.register_message_handler(send_one, text=['–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç'], state = FSMcreate.admin_panel)
    dp.register_message_handler(send_one_main, state = FSMcreate.send_one_main)




from create_bot import bot, dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import types, Dispatcher
from keyboard import greet_key, brcs_key
from config import admin_id
import time
from datetime import datetime
from connect import get_info_db, check, print_all_price, get_user_balance, get_user_balance, write, write_balance, write_ref_balance, get_ref_balance, print_all_referrers


# ean = barcode.get('ean13', barcode_init, writer=ImageWriter())
            


'''
functions(hendlers)
'''
class FSMcreate(StatesGroup):
    checking = State()
    cont = State()
    add = State()
    end = State()

async def sub_start(message: types.Message):
	print(str(f'LOG --- User {message.from_user} asked his time'))
	await FSMcreate.checking.set()
	await bot.send_message(chat_id = message.from_user.id, text = "<b><i>‚òëÔ∏è –û–±–∏—Ä–∞–π —Ñ—É–Ω–∫—Ü—ñ—é ‚öôÔ∏è</i></b>" , reply_markup=sub_key)

async def checker_time(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    end_time = await get_info_db(str(user_id))
    print(end_time, user_id)
    if end_time >= int(time.time()):
        real_time = int(time.time())
        print(real_time)
        if end_time >= real_time:
            dat = datetime.fromtimestamp(end_time).strftime('%d-%m-%Y \n%H–≥–æ–¥. %M—Ö–≤.')
            data = f'‚è≥<i><b>–ü—ñ–¥–ø–∏—Å–∫–∞ c–∫—ñ–Ω—á–∏—Ç—å—Å—è:</b></i>\n<b>{dat}</b>'
    else:
        data = f'<b>–ù–∞–∂–∞–ª—å, –ø—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—èü©∏\n–î–ª—è –ø–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥—ñ—ó –∑–∞–π–¥–∏ –≤ üëâ <i>–ü—ñ–¥–ø–∏—Å–∫–∞ üëâ –ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É</i></b>\n'
    await bot.send_message(chat_id=message.from_user.id, text=f'{data}')


######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################


async def continue_sub(message: types.Message, state: FSMContext):
    list_subs = await print_all_price()
    result_string_list = "‚òëÔ∏è <i><b>–û–±–µ—Ä–∏ —Ç–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏ —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å —ñ –Ω–∞–ø–∏—à–∏ —ó—ó –Ω–æ–º–µ—Ä </b></i>üëá\n"
    inx = 1
    for i in list_subs:
        result_string_list += f'‚ñ™Ô∏è –ù–æ–º–µ—Ä {inx}: <i>–Ω–∞</i> <b>{i}</b> <i>–¥–Ω—ñ –∑–∞</i> <b>{list_subs.get(i)}</b>\n'
        inx += 1
    result_string_list += '\n<i>*–û–±–æ–≤\'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è –≤ —Ç–∞—Ä–∏—Ñ—ñ, –ø–æ—Ç—ñ–º –π–æ–≥–æ –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏!</i>'

    await bot.send_message(chat_id=message.from_user.id, text = f"{result_string_list}", reply_markup=await res_key())
    await FSMcreate.cont.set()

async def sub_sender(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if True:
        dict_subs = dict(await print_all_price())
        price_arr = [(x, dict_subs.get(x)) for x in dict_subs]
        price = price_arr[int(message.text)-1][1]
        timing = int(price_arr[int(message.text)-1][0])
        balance = await get_user_balance(user_id)
        if balance < price:
            await bot.send_message(chat_id=message.from_user.id, text='<b>–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –≥—Ä–æ—à–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ü—å–æ–≥–æ —Ç–∞—Ä–∏—Ñ—Éüò¢\n–°–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–πüòâ</b>')
        else:
            new_balance = balance - price
            await write_balance(str(message.from_user.id), new_balance)
            if await check(str(message.from_user.id)) is True:
                my_time = int(await get_info_db(str(message.from_user.id)))
                dat = my_time + (timing * 86400) + 10800
            else:
                dat = int(time.time()) + (timing * 86400) + 10800
            await write(user_id, dat)
            await bot.send_message(chat_id=user_id, text='<b>–ì–æ—Ç–æ–≤–æ‚úÖ\n–ü—ñ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–æ–≤–∂–µ–Ω–∞üòâ</b>', reply_markup=sub_key)
            await FSMcreate.checking.set()
#         dict_subs = dict(await print_all_price())
#         price = [(x, dict_subs.get(x)) for x in dict_subs]
#         print(price[int(message.text)-1])
#         # print(await check(message.from_user.id))
#         if await check(str(message.from_user.id)) is True:
#             my_time = int(await get_info_db(str(message.from_user.id)))
#             print(f'My_time:{my_time}, time: {time.time()}')
#             dat = datetime.fromtimestamp(my_time + (int(price[int(message.text)-1][0]) * 86400) + 10800).strftime('%Y %m %d %H:%M')
#         else:
#             dat = datetime.fromtimestamp(int(time.time()) + (int(price[int(message.text)-1][0]) * 86400) + 10800).strftime('%Y %m %d %H:%M')
#         await bot.send_message(chat_id=message.from_user.id, text=
# f'''üí∏ <i>–î–æ —Å–ø–ª–∞—Ç–∏: <b>{price[int(message.text)-1][1]}</b> ‚Ç¥

# üëâ –î–ª—è —Å–ø–ª–∞—Ç–∏ —Ç—Ä–µ–±–∞ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ <b>–±–∞–Ω–∫—É Monobank</b> –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ
# üëâ –í –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–π —Å–≤i–π id - <code>{message.from_user.id}</code>, —â–æ–± –º–∏ –º–æ–≥–ª–∏ —à–≤–∏–¥—à–µ –≤—Å–µ –ø–µ—Ä–µ–≤i—Ä–∏—Ç–∏</i>
# https://send.monobank.ua/jar/4wbdHDhyeK

# <i>üëá –ù–∞–æ—Å—Ç–∞–Ω–æ–∫ –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω–∏–π —á–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è</i>''', reply_markup=brcs_key)
#         await FSMcreate.complete.set()
#         async with state.proxy() as data:
#             data['result'] = f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user} —Å–ø–ª–∞—Ç–∏–≤ {price[int(message.text)-1][1]} –∑–∞ {message.text} —Ç–∞—Ä–∏—Ñ–æ–º.\n–ì–æ—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ - <code>{message.from_user.id} {dat}</code>'
    else:
        await bot.send_message(chat_id=message.from_user.id, text='<i><b>–©–æ—Å—å –Ω–µ —Ç–∞–∫ü§î\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑‚ùóÔ∏è</b></i>')
        print('faillllll')


#######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################

async def balance_start(message: types.Message, state: FSMContext):
    current_balance = await get_user_balance(str(message.from_user.id))
    await bot.send_message(chat_id=message.from_user.id, text=f'üßÆ –ë–∞–ª–∞–Ω—Å: <b>{current_balance}</b> ‚Ç¥')


######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################

async def add_balance(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text='üëâ <b>–ù–∞–ø–∏—à–∏ —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:</b>\n‚ûñ –ú—ñ–Ω—ñ–º—É–º: <b>100.00‚Ç¥</b>\n‚ûñ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>150.99</code>\n\n<i>*–ê–±–æ –æ–±–µ—Ä–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—ñ –Ω–∏–∂—á–µüòâ</i>', reply_markup=examples_key)
    await FSMcreate.add.set()

async def add_balance_main(message: types.Message, state: FSMContext):
    try:
        summ = float(message.text)
        if summ < 100:
            await bot.send_message(chat_id=message.from_user.id, text='<i><b>–°—É–º–∞ –º–µ–Ω—à–∞ –∑–∞ –º—ñ–Ω—ñ–º—É–ºü§ï\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑‚ùóÔ∏è</b></i>')
            return
        await bot.send_message(chat_id=message.from_user.id, text=
f'''üí∏ <i>–î–æ —Å–ø–ª–∞—Ç–∏: <b>{summ}</b> ‚Ç¥

üëâ –î–ª—è —Å–ø–ª–∞—Ç–∏ —Ç—Ä–µ–±–∞ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ <b>–±–∞–Ω–∫—É Monobank</b> –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ
üëâ –í –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–π —Å–≤i–π id - <code>{message.from_user.id}</code>, —â–æ–± –º–∏ –º–æ–≥–ª–∏ —à–≤–∏–¥—à–µ –≤—Å–µ –ø–µ—Ä–µ–≤i—Ä–∏—Ç–∏</i>
https://send.monobank.ua/jar/4wbdHDhyeK

<i>üëá –ù–∞–æ—Å—Ç–∞–Ω–æ–∫ –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω–∏–π —á–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è</i>''', reply_markup=brcs_key)
        await FSMcreate.end.set()
        async with state.proxy() as data:
            data['summ'] = summ
    except:
        await bot.send_message(chat_id=message.from_user.id, text='<i><b>–©–æ—Å—å –Ω–µ —Ç–∞–∫ü§î\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑‚ùóÔ∏è</b></i>')

async def add_balance_end(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        summ = data['summ']
        for i in admin_id:
            await bot.send_message(chat_id=i, text=f'<b>**********************************************\n–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞–≤ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–Ω–∫—É –Ω–∞ {summ}</b>:\n<i>{message.from_user}</i>\n<b>–í–∫–∞–∑–∞–Ω–∏–π —á–∞—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:</b><i>{message.text}</i>\n\n–ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: <code>{message.from_user.id} {summ}</code>')
        await bot.send_message(chat_id=message.from_user.id, text='<b>–ë–µ–∑–º–µ–∂–Ω–æ –¥—è–∫—É—î–º–æ –∑–∞ –¥–æ–≤—ñ—Ä—É</b> ü§ó\n–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–≤–∏–¥–∫–æ –æ–ø—Ä–∞—Ü—é—î –∑–∞–ø–∏—Çüå™\n–Ø–∫—â–æ –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–æ–ø–æ–º–æ–≥–∞, —Ç–æ –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º \nüëâ @p2pBot_support', reply_markup=sub_key)
    await FSMcreate.checking.set()

######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################


async def ref_program(message: types.Message, state: FSMContext):
    ref_balance = await get_ref_balance(str(message.from_user.id))
    ref_link = f'https://t.me/P2P_prices_bot?start={message.from_user.id}'
    arr = await print_all_referrers()
    # print(arr)
    num_refs = 0
    for i in arr:
        # print(arr.get(i), message.from_user.id)
        if int(arr.get(i)) == int(message.from_user.id):
            num_refs += 1

    await bot.send_message(chat_id=message.from_user.id, text=
f'''üòç <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–ºa</b> üî•
üëâ –í—ñ–¥ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–≤–æ–≥–æ –¥—Ä—É–≥–∞ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à <b>20%</b>

üí∞ –ë–∞–ª–∞–Ω—Å: {round(ref_balance, 2)}
ü´Ç –ö—ñ–ª-—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö: {num_refs}
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {ref_link}

–ó–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è–º –ø–∏—à–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É: @p2pBot_support
''')







######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################




async def back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await bot.send_message(chat_id = message.from_user.id, text = 'Ok', reply_markup=greet_key)

def register_handlers_create(dp: Dispatcher):
    dp.register_message_handler(back, state='*', commands=['–ù–∞–∑–∞–¥'])
    dp.register_message_handler(back, Text(equals='–Ω–∞–∑–∞–¥', ignore_case=True), state='*')
    dp.register_message_handler(sub_start, text=["–ü—ñ–¥–ø–∏—Å–∫–∞üîë"], state = None)
    dp.register_message_handler(balance_start, text=['–ë–∞–ª–∞–Ω—ÅüßÆ'], state = FSMcreate.checking)
    dp.register_message_handler(checker_time, text=["–°–∫—ñ–ª—å–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å‚åõÔ∏è"], state = FSMcreate.checking)
    dp.register_message_handler(ref_program, text=["–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞üî•"], state = FSMcreate.checking)


    dp.register_message_handler(add_balance, text=["–ü–æ–ø–æ–≤–Ω–∏—Ç–∏üì•"], state = FSMcreate.checking)
    dp.register_message_handler(add_balance_main, state = FSMcreate.add)
    dp.register_message_handler(add_balance_end, state = FSMcreate.end)


    dp.register_message_handler(continue_sub, text=['–ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—Éüí∏'], state = FSMcreate.checking)
    dp.register_message_handler(sub_sender, state = FSMcreate.cont)
